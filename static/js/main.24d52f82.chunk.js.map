{"version":3,"sources":["../../../react projects/search-app/src/components/SearchForm.js","../../../react projects/search-app/src/components/Meteor.js","../../../react projects/search-app/src/components/Results.js","../../../react projects/search-app/src/App.js","../../../react projects/search-app/src/serviceWorker.js","../../../react projects/search-app/src/index.js"],"names":["SearchForm","state","value","handleValueChange","e","_this","setState","target","props","handleFilter","react_default","a","createElement","Form","inline","FormGroup","controlId","FormControl","type","placeholder","this","onChange","Button","Component","Meteor","index","id","name","nametype","recclass","mass","fall","year","reclat","reclong","Results","Table_default","responsive","meteors","map","meteor","components_Meteor","key","toString","geolocation","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","v","updatedList","filter","toLowerCase","search","filteredMeteors","_this2","fetch","then","response","json","data","Jumbotron","Container","components_SearchForm","components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAyCeA,6MA/BbC,MAAQ,CACNC,MAAO,MAGTC,kBAAoB,SAACC,GACnBC,EAAKC,SAAS,CACZJ,MAAOE,EAAEG,OAAOL,QAElBG,EAAKG,MAAMC,aAAaL,EAAEG,OAAOL,gFAIjC,OACEQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,QAAM,GACVJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,UAAU,mBACnBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACAC,KAAK,SACLC,YAAY,sBACZjB,MAAOkB,KAAKnB,MAAMC,MAClBmB,SAAUD,KAAKjB,qBAGhB,IACDO,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQJ,KAAK,UAAb,kBAxBiBK,aCuBVC,EA9BA,SAAChB,GAAU,IAEtBiB,EAUEjB,EAVFiB,MACAC,EASElB,EATFkB,GACAC,EAQEnB,EARFmB,KACAC,EAOEpB,EAPFoB,SACAC,EAMErB,EANFqB,SACAC,EAKEtB,EALFsB,KACAC,EAIEvB,EAJFuB,KACAC,EAGExB,EAHFwB,KACAC,EAEEzB,EAFFyB,OACAC,EACE1B,EADF0B,QAGF,OACExB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKa,GACLf,EAAAC,EAAAC,cAAA,UAAKe,GACLjB,EAAAC,EAAAC,cAAA,UAAKc,GACLhB,EAAAC,EAAAC,cAAA,UAAKgB,GACLlB,EAAAC,EAAAC,cAAA,UAAKiB,GACLnB,EAAAC,EAAAC,cAAA,UAAKkB,GACLpB,EAAAC,EAAAC,cAAA,UAAKmB,GACLrB,EAAAC,EAAAC,cAAA,UAAKoB,GACLtB,EAAAC,EAAAC,cAAA,UAAKqB,GACLvB,EAAAC,EAAAC,cAAA,UAAKsB,sBCkBIC,EAzCC,SAAC3B,GAEf,OACEE,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAO0B,YAAU,GACf3B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBAIJF,EAAAC,EAAAC,cAAA,aACIJ,EAAM8B,QAAQC,IAAK,SAACC,EAAQf,GAAT,OACnBf,EAAAC,EAAAC,cAAC6B,EAAD,CACEhB,MAAQA,EACRiB,IAAMF,EAAOd,GAAGiB,WAChBjB,GAAKc,EAAOd,GACZC,KAAOa,EAAOb,KACdC,SAAWY,EAAOZ,SAClBC,SAAWW,EAAOX,SAClBC,KAAOU,EAAOV,KACdC,KAAOS,EAAOT,KACdC,KAAOQ,EAAOR,KACdC,OAASO,EAAOP,OAChBC,QAAUM,EAAON,QACjBU,YAAcJ,EAAOI,mBCoBlBC,cAnDb,SAAAA,IAAc,IAAAxC,EAAA,OAAAyC,OAAAC,EAAA,EAAAD,CAAA1B,KAAAyB,IACZxC,EAAAyC,OAAAE,EAAA,EAAAF,CAAA1B,KAAA0B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA9B,QAmBFX,aAAe,SAAC0C,GACd,IAAIC,EAAc/C,EAAKJ,MAAMqC,QAC7Bc,EAAcA,EAAYC,OAAQ,SAAAb,GAChC,OAEO,IAFAA,EAAOb,KAAK2B,cAAcC,OAC/BJ,EAAEG,iBAGNjD,EAAKC,SAAS,CAACgC,QAASc,KAzBxB/C,EAAKJ,MAAQ,CACXqC,QAAS,GACTkB,gBAAiB,IAJPnD,mFAQM,IAAAoD,EAAArC,KAClBsC,MAAM,iDACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKnD,SAAS,CACZgC,QAASwB,uCAkBb,OACEpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,KACErD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KACEtD,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sDAGAF,EAAAC,EAAAC,cAACqD,EAAD,CAAYxD,aAAcW,KAAKX,iBAGnCC,EAAAC,EAAAC,cAACsD,EAAD,CACE5B,QAASlB,KAAKnB,MAAMqC,QACpBkB,gBAAiBpC,KAAKnB,MAAMuD,0BA7CpBjC,aCOE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.24d52f82.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  FormControl,\r\n  Button\r\n} from 'react-bootstrap';\r\n\r\n\r\nclass SearchForm extends Component {\r\n  state = {\r\n    value: ''\r\n  }\r\n\r\n  handleValueChange = (e) => {\r\n    this.setState({ \r\n      value: e.target.value\r\n    });\r\n    this.props.handleFilter(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <Form inline>\r\n        <FormGroup controlId=\"formInlineEmail\">\r\n          <FormControl \r\n          type=\"search\" \r\n          placeholder=\"Enter a Meteor Name\"\r\n          value={this.state.value}\r\n          onChange={this.handleValueChange}\r\n          />\r\n        </FormGroup>\r\n        {' '}\r\n        <Button type=\"submit\">\r\n          Search\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SearchForm;","import React from 'react';\r\n\r\nconst Meteor = (props) => {\r\n  const {\r\n    index,\r\n    id,\r\n    name,\r\n    nametype,\r\n    recclass,\r\n    mass,\r\n    fall,\r\n    year,\r\n    reclat,\r\n    reclong\r\n  } = props;\r\n\r\n  return(\r\n    <tr>\r\n      <td>{index}</td>\r\n      <td>{name}</td>\r\n      <td>{id}</td>\r\n      <td>{nametype}</td>\r\n      <td>{recclass}</td>\r\n      <td>{mass}</td>\r\n      <td>{fall}</td>\r\n      <td>{year}</td>\r\n      <td>{reclat}</td>\r\n      <td>{reclong}</td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Meteor;","import React from 'react';\r\nimport Meteor from './Meteor';\r\nimport Table from 'react-bootstrap/Table'\r\n\r\nconst Results = (props) => {\r\n  \r\n  return(\r\n    <Table responsive>\r\n      <thead>\r\n        <tr>\r\n          <th>Number</th>\r\n          <th>Name</th>\r\n          <th>ID</th>\r\n          <th>Type</th>\r\n          <th>Class</th>\r\n          <th>Mass</th>\r\n          <th>Fall</th>\r\n          <th>Year</th>\r\n          <th>Latitude</th>\r\n          <th>Longitude</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        { props.meteors.map( (meteor, index) =>\r\n          <Meteor\r\n            index={ index }\r\n            key={ meteor.id.toString() }\r\n            id={ meteor.id }\r\n            name={ meteor.name }\r\n            nametype={ meteor.nametype }\r\n            recclass={ meteor.recclass }\r\n            mass={ meteor.mass }\r\n            fall={ meteor.fall }\r\n            year={ meteor.year }\r\n            reclat={ meteor.reclat }\r\n            reclong={ meteor.reclong }\r\n            geolocation={ meteor.geolocation }\r\n          />\r\n        )}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\nimport { Jumbotron, Container } from 'react-bootstrap';\nimport SearchForm from './components/SearchForm';\nimport Results from './components/Results';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      meteors: [],\n      filteredMeteors: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://data.nasa.gov/resource/gh4g-9sfh.json')\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        meteors: data\n      });\n    });\n  }\n\n  \n\n  handleFilter = (v) => {\n    let updatedList = this.state.meteors;\n    updatedList = updatedList.filter( meteor => {\n      return meteor.name.toLowerCase().search(\n        v.toLowerCase() \n      ) !== -1;\n    });\n    this.setState({meteors: updatedList});\n  }\n\n  render() {\n    return (\n      <div>\n        <Jumbotron>\n          <Container>\n            <h1>Meteors List</h1>\n            <p>\n              This is a list of NASA's recorded meteors\n            </p>\n            <SearchForm handleFilter={this.handleFilter} />\n          </Container>\n        </Jumbotron>\n        <Results \n          meteors={this.state.meteors}\n          filteredMeteors={this.state.filteredMeteors}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}